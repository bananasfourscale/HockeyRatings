def calculate_defensive_rating(update_trends : bool=True) -> None:
    defensive_metrics = defensive_rating_get_data_set(team_season_stats)

    # plot each metric before sigmoid
    write_out_file("Output_Files/Team_Files/Instance_Files/ShotsAgaRatingBase.csv",
        ["Team", "Shots Against Base"], defensive_metrics[0])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/ShotsAgaRatingBase.csv",
        ["Team", "Shots Against Base"], 0.0, 0.0, [],
        "Graphs/Teams/Defensive_Rating/shots_against_per_game_base.png", True)))
    write_out_file("Output_Files/Team_Files/Instance_Files/GoalsAgaRatingBase.csv",
        ["Team", "Goals Against Base"], defensive_metrics[1])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/GoalsAgaRatingBase.csv",
        ["Team", "Goals Against Base"], 0.0, 0.0, [],
        "Graphs/Teams/Defensive_Rating/goals_against_per_game_base.png", True)))
    write_out_file("Output_Files/Team_Files/Instance_Files/PKRatingBase.csv",
        ["Team", "Penalty Kill Base"], defensive_metrics[2])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/PKRatingBase.csv",
        ["Team", "Penalty Kill Base"], 0.0, 0.0, [],
        "Graphs/Teams/Defensive_Rating/penalty_kill_base.png")))
    
    # apply sigmoid corrections
    apply_sigmoid_correction(defensive_metrics[0], True)
    apply_sigmoid_correction(defensive_metrics[1], True)
    apply_sigmoid_correction(defensive_metrics[2], False)

    # plot individual metrics after sigmoid
    write_out_file("Output_Files/Team_Files/Instance_Files/ShotsAgaRatingCorr.csv",
        ["Team", "Shots Against Corrected"], defensive_metrics[0])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/ShotsAgaRatingCorr.csv",
        ["Team", "Shots Against Corrected"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Defensive_Rating/shots_against_per_game_sigmoid.png")))
    write_out_file("Output_Files/Team_Files/Instance_Files/GoalsAgaRatingCorr.csv",
        ["Team", "Goals Against Corrected"], defensive_metrics[1])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/GoalsAgaRatingCorr.csv",
        ["Team", "Goals Against Corrected"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Defensive_Rating/goals_against_per_game_sigmoid.png")))
    write_out_file("Output_Files/Team_Files/Instance_Files/PKRatingCorr.csv",
        ["Team", "Penalty Kill Corrected"], defensive_metrics[2])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/PKRatingCorr.csv",
        ["Team", "Penalty Kill Corrected"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Defensive_Rating/penalty_kill_sigmoid.png")))

    # combine metrics to overall score and plot
    defensive_rating_combine_metrics(defensive_metrics)
    write_out_file("Output_Files/Team_Files/Instance_Files/DefensiveRating.csv",
        ["Team", "Defensive Rating Final"], defensive_rating_get_dict())
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/DefensiveRating.csv",
        ["Team", "Defensive Rating Final"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Defensive_Rating/defensive_rating_final.png")))

    # update trend file
    if update_trends:
        update_trend_file("Output_Files/Team_Files/Trend_Files/DefensiveRating.csv",
            defensive_rating_get_dict())
    team_engine_plotting_queue.put((plot_team_trend_set,
        ("Output_Files/Team_Files/Trend_Files/DefensiveRating.csv",
        ["Rating Date", "Defensive Rating"], 1.1, -.1, sigmoid_ticks,
        "Graphs/Teams/Defensive_Rating/defensive_rating_trend.png")))


def calculate_offensive_rating(update_trends : bool=True) -> None:
    offensive_metrics = offensive_rating_get_data_set(team_season_stats)

    # plot each metric before sigmoid
    write_out_file("Output_Files/Team_Files/Instance_Files/ShotsForRatingBase.csv",
        ["Team", "Shots For Base"], offensive_metrics[0])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/ShotsForRatingBase.csv",
        ["Team", "Shots For Base"], 0.0, 0.0, [],
        "Graphs/Teams/Offensive_Rating/shots_for_per_game_base.png")))
    write_out_file("Output_Files/Team_Files/Instance_Files/GoalsForRatingBase.csv",
        ["Team", "Goals For Base"], offensive_metrics[1])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/GoalsForRatingBase.csv",
        ["Team", "Goals For Base"], 0.0, 0.0, [],
        "Graphs/Teams/Offensive_Rating/goals_for_per_game_base.png")))
    write_out_file("Output_Files/Team_Files/Instance_Files/PPRatingBase.csv",
        ["Team", "Power Play Base"], offensive_metrics[2])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/PPRatingBase.csv",
        ["Team", "Power Play Base"], 0.0, 0.0, [],
        "Graphs/Teams/Offensive_Rating/power_play_base.png")))
    
    # apply sigmoid corrections
    for metric_dict in offensive_metrics:
        apply_sigmoid_correction(metric_dict)

    # plot individual metrics after sigmoid
    write_out_file("Output_Files/Team_Files/Instance_Files/ShotsForRatingCorr.csv",
        ["Team", "Shots For Corrected"], offensive_metrics[0])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/ShotsForRatingCorr.csv",
        ["Team", "Shots For Corrected"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Offensive_Rating/shots_for_per_game_sigmoid.png")))
    write_out_file("Output_Files/Team_Files/Instance_Files/GoalsForRatingCorr.csv",
        ["Team", "Goals For Corrected"], offensive_metrics[1])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/GoalsForRatingCorr.csv",
        ["Team", "Goals For Corrected"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Offensive_Rating/goals_for_per_game_sigmoid.png")))
    write_out_file("Output_Files/Team_Files/Instance_Files/PPRatingCorr.csv",
        ["Team", "Power Play Corrected"], offensive_metrics[2])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/PPRatingCorr.csv",
        ["Team", "Power Play Corrected"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Offensive_Rating/power_play_sigmoid.png")))

    # combine metrics to overall score and plot
    offensive_rating_combine_metrics(offensive_metrics)
    write_out_file("Output_Files/Team_Files/Instance_Files/OffensiveRating.csv",
        ["Team", "Offensive Rating Final"], offensive_rating_get_dict())
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/OffensiveRating.csv",
        ["Team", "Offensive Rating Final"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Offensive_Rating/offensive_rating_final.png")))

    # update trend file
    if update_trends:
        update_trend_file("Output_Files/Team_Files/Trend_Files/OffensiveRating.csv",
            offensive_rating_get_dict())
    team_engine_plotting_queue.put((plot_team_trend_set,
        ("Output_Files/Team_Files/Trend_Files/OffensiveRating.csv",
        ["Rating Date", "Offensive Rating"], 1.1, -.1, sigmoid_ticks,
        "Graphs/Teams/Offensive_Rating/offensive_rating_trend.png")))


def calculate_recent_form(update_trends : bool=True) -> None:
    
    # get all the data used for recent form across all metrics
    recent_form_metrics = recent_form_get_data_set(team_season_records)

    # last 10 is just a string value so actually calculate the rating and plot
    recent_form_metrics[0] = \
        recent_form_calculate_last_ten(recent_form_metrics[0])
    write_out_file("Output_Files/Team_Files/Instance_Files/RecentFormLast10Base.csv",
        ["Team", "Last Ten Games"], recent_form_metrics[0])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/RecentFormLast10Base.csv",
        ["Team", "Last Ten Games"], 10.0, 0,
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "Graphs/Teams/Recent_Form/recent_form_last_ten_base.png")))

    recent_form_metrics[1] = \
        recent_form_calculate_streak(recent_form_metrics[1])
    write_out_file("Output_Files/Team_Files/Instance_Files/RecentFormStreakBase.csv",
        ["Team", "Current Streak"], recent_form_metrics[1])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/RecentFormStreakBase.csv",
        ["Team", "Current Streak"], 0.0, 0.0, [],
        "Graphs/Teams/Recent_Form/recent_form_streak_base.png")))

    # now apply the sigmoid correction and plot
    recent_form_metrics[0] = apply_sigmoid_correction(recent_form_metrics[0])
    write_out_file("Output_Files/Team_Files/Instance_Files/RecentFormLastTenCorr.csv",
        ["Team", "Last Ten Games"], recent_form_metrics[0])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/RecentFormLastTenCorr.csv",
        ["Team", "Last Ten Games"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Recent_Form/recent_form_last_ten_corrected.png")))
    recent_form_metrics[1] = apply_sigmoid_correction(recent_form_metrics[1])
    write_out_file("Output_Files/Team_Files/Instance_Files/RecentFormStreakCorr.csv",
        ["Team", "Last Ten Games"], recent_form_metrics[1])
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/RecentFormStreakCorr.csv",
        ["Team", "Last Ten Games"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Recent_Form/recent_form_streak_corrected.png")))

    # combine the metrics and plot the final result
    recent_form_combine_metrics(recent_form_metrics)
    write_out_file("Output_Files/Team_Files/Instance_Files/RecentFormFinal.csv",
        ["Team", "Recent Form Rating"], recent_form_get_dict())
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/RecentFormFinal.csv",
        ["Team", "Recent Form Rating"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Recent_Form/recent_form_final.png")))

    # update the trend file
    if update_trends:
        update_trend_file("Output_Files/Team_Files/Trend_Files/RecentForm.csv",
            recent_form_get_dict())
    team_engine_plotting_queue.put((plot_team_trend_set,
        ("Output_Files/Team_Files/Trend_Files/RecentForm.csv",
        ["Rating Date", "Recent Form"], 1.1, -.1, sigmoid_ticks,
        "Graphs/Teams/Recent_Form/recent_form_trend.png")))


def calculate_strenght_of_schedule(update_trends : bool=True) -> None:
    # scale the strength of schedule by game, write out again, and graph
    strength_of_schedule_calculate(average_rankings_get_dict(),
        average_ranking_get_ranking_dates(), season_matches)
    write_out_file("Output_Files/Team_Files/Instance_Files/StengthOfScheduleBase.csv",
        ["Team", "Strength of Schedule Base"], strength_of_schedule_get_dict())
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/StengthOfScheduleBase.csv",
        ["Team", "Strength of Schedule Base"], 0.0, 0.0, [],
        "Graphs/Teams/Strength_of_Schedule/sos_base.png")))

    strength_of_schedule_scale_by_game(team_season_stats)
    write_out_file("Output_Files/Team_Files/Instance_Files/StengthOfScheduleScale.csv",
        ["Team", "Strength of Schedule Game Scale"], strength_of_schedule_get_dict())
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/StengthOfScheduleScale.csv",
        ["Team", "Strength of Schedule Game Scale"], 0.0, 0.0, [],
        "Graphs/Teams/Strength_of_Schedule/sos_game_scale.png")))

    # apply sigmoid correction, write out again, and graph
    apply_sigmoid_correction(strength_of_schedule_get_dict())
    write_out_file("Output_Files/Team_Files/Instance_Files/StengthOfScheduleCorrected.csv",
        ["Team", "Strength of Schedule Corrected"],
        strength_of_schedule_get_dict())
    team_engine_plotting_queue.put((plot_data_set,
        ("Output_Files/Team_Files/Instance_Files/StengthOfScheduleCorrected.csv",
        ["Team", "Strength of Schedule Corrected"], 1.0, 0.0, sigmoid_ticks,
        "Graphs/Teams/Strength_of_Schedule/strenght_of_schedule_final.png")))

    # update trend file
    if update_trends:
        update_trend_file("Output_Files/Team_Files/Trend_Files/StrengthOfSchedule.csv",
            strength_of_schedule_get_dict())
    team_engine_plotting_queue.put((plot_team_trend_set,
        ("Output_Files/Team_Files/Trend_Files/StrengthOfSchedule.csv",
        ["Rating Date", "Strength of Schedule"], 1.1, -.1, sigmoid_ticks,
        "Graphs/Teams/Strength_of_Schedule/strength_of_schedule_trend.png")))